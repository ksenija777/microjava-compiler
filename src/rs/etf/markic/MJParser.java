
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 16 20:42:46 CET 2014
//----------------------------------------------------

package rs.etf.markic;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.ListIterator;
import java.util.Deque;
import java.util.ArrayDeque;
import java.util.Set;
import java.util.HashSet;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.SymbolTableVisitor;
import rs.etf.pp1.mj.runtime.Code;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 16 20:42:46 CET 2014
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\075\002\000\002\002\011\000\002\002" +
    "\004\000\002\055\003\000\002\003\004\000\002\003\002" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\006\006\000\002\006\006\000\002\005\005\000\002" +
    "\005\003\000\002\007\005\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\011\005" +
    "\000\002\011\005\000\002\010\005\000\002\010\003\000" +
    "\002\010\004\000\002\012\003\000\002\012\005\000\002" +
    "\057\003\000\002\022\005\000\002\022\007\000\002\022" +
    "\007\000\002\025\003\000\002\023\010\000\002\023\005" +
    "\000\002\024\004\000\002\024\002\000\002\031\004\000" +
    "\002\031\002\000\002\027\005\000\002\027\005\000\002" +
    "\027\003\000\002\026\005\000\002\026\003\000\002\030" +
    "\003\000\002\030\005\000\002\060\003\000\002\032\004" +
    "\000\002\076\002\000\002\032\005\000\002\077\002\000" +
    "\002\033\013\000\002\013\004\000\002\013\002\000\002" +
    "\014\004\000\002\100\002\000\002\014\005\000\002\056" +
    "\003\000\002\101\002\000\002\015\013\000\002\034\003" +
    "\000\002\034\002\000\002\035\005\000\002\035\003\000" +
    "\002\035\003\000\002\036\004\000\002\036\006\000\002" +
    "\016\004\000\002\016\002\000\002\016\003\000\002\020" +
    "\005\000\002\020\005\000\002\020\004\000\002\017\005" +
    "\000\002\017\003\000\002\021\003\000\002\021\005\000" +
    "\002\061\003\000\002\037\004\000\002\037\002\000\002" +
    "\040\003\000\002\040\003\000\002\046\006\000\002\046" +
    "\006\000\002\046\005\000\002\046\005\000\002\046\007" +
    "\000\002\046\005\000\002\046\007\000\002\046\007\000" +
    "\002\046\011\000\002\046\005\000\002\046\004\000\002" +
    "\046\004\000\002\046\005\000\002\046\007\000\002\046" +
    "\012\000\002\047\006\000\002\047\012\000\002\047\007" +
    "\000\002\043\002\000\002\044\002\000\002\045\002\000" +
    "\002\041\002\000\002\042\002\000\002\054\003\000\002" +
    "\054\002\000\002\053\005\000\002\053\003\000\002\053" +
    "\003\000\002\071\003\000\002\102\002\000\002\050\006" +
    "\000\002\050\005\000\002\103\002\000\002\051\006\000" +
    "\002\051\003\000\002\052\005\000\002\052\003\000\002" +
    "\066\003\000\002\066\005\000\002\062\005\000\002\062" +
    "\003\000\002\062\004\000\002\063\005\000\002\063\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\005\000\002" +
    "\064\004\000\002\064\007\000\002\064\006\000\002\067" +
    "\003\000\002\070\005\000\002\104\002\000\002\070\007" +
    "\000\002\070\006\000\002\070\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\072\003\000\002\072" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\004\005\001\002\000\004\002\u0103\001" +
    "\002\000\004\020\007\001\002\000\012\005\ufffc\006\ufffc" +
    "\020\ufffc\032\ufffc\001\002\000\012\005\ufffe\006\ufffe\020" +
    "\ufffe\032\ufffe\001\002\000\012\005\021\006\020\020\013" +
    "\032\012\001\002\000\006\003\371\020\372\001\002\000" +
    "\010\020\001\033\001\056\001\001\002\000\054\003\uffb7" +
    "\020\uffb7\026\uffb7\027\uffb7\031\uffb7\032\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\047\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\001\002\000\012\005\ufffa\006\ufffa\020\ufffa\032\ufffa" +
    "\001\002\000\012\005\ufffd\006\ufffd\020\ufffd\032\ufffd\001" +
    "\002\000\012\005\ufff9\006\ufff9\020\ufff9\032\ufff9\001\002" +
    "\000\012\005\ufffb\006\ufffb\020\ufffb\032\ufffb\001\002\000" +
    "\004\020\042\001\002\000\004\020\013\001\002\000\006" +
    "\003\023\020\026\001\002\000\004\027\040\001\002\000" +
    "\006\026\ufff5\027\ufff5\001\002\000\006\026\035\027\036" +
    "\001\002\000\004\055\027\001\002\000\012\021\030\022" +
    "\034\023\033\024\031\001\002\000\006\026\ufff3\027\ufff3" +
    "\001\002\000\006\026\ufff0\027\ufff0\001\002\000\006\026" +
    "\ufff4\027\ufff4\001\002\000\006\026\ufff1\027\ufff1\001\002" +
    "\000\006\026\ufff2\027\ufff2\001\002\000\004\020\026\001" +
    "\002\000\012\005\ufff8\006\ufff8\020\ufff8\032\ufff8\001\002" +
    "\000\006\026\ufff6\027\ufff6\001\002\000\012\005\ufff7\006" +
    "\ufff7\020\ufff7\032\ufff7\001\002\000\006\007\044\032\043" +
    "\001\002\000\006\007\uffe8\032\uffe8\001\002\000\012\003" +
    "\uffe0\020\uffe0\032\uffe0\033\uffe0\001\002\000\006\003\047" +
    "\020\013\001\002\000\012\005\uffe7\006\uffe7\020\uffe7\032" +
    "\uffe7\001\002\000\004\032\uffe4\001\002\000\004\032\043" +
    "\001\002\000\004\032\043\001\002\000\012\005\uffe6\006" +
    "\uffe6\020\uffe6\032\uffe6\001\002\000\012\005\uffe5\006\uffe5" +
    "\020\uffe5\032\uffe5\001\002\000\012\003\056\020\013\032" +
    "\054\033\057\001\002\000\010\020\uffde\033\uffde\056\uffde" +
    "\001\002\000\006\003\062\020\064\001\002\000\012\003" +
    "\uffdb\020\uffdb\032\uffdb\033\uffdb\001\002\000\012\005\uffe2" +
    "\006\uffe2\020\uffe2\032\uffe2\001\002\000\012\003\uffe1\020" +
    "\uffe1\032\uffe1\033\uffe1\001\002\000\006\026\070\027\071" +
    "\001\002\000\004\027\067\001\002\000\006\026\uffd9\027" +
    "\uffd9\001\002\000\010\026\uffd8\027\uffd8\034\065\001\002" +
    "\000\004\035\066\001\002\000\006\026\uffd7\027\uffd7\001" +
    "\002\000\012\003\uffdc\020\uffdc\032\uffdc\033\uffdc\001\002" +
    "\000\004\020\064\001\002\000\012\003\uffdd\020\uffdd\032" +
    "\uffdd\033\uffdd\001\002\000\006\026\uffda\027\uffda\001\002" +
    "\000\010\020\013\033\075\056\077\001\002\000\004\020" +
    "\101\001\002\000\004\033\343\001\002\000\010\020\uffdf" +
    "\033\uffdf\056\uffdf\001\002\000\004\020\uffd4\001\002\000" +
    "\004\020\101\001\002\000\004\030\uffd6\001\002\000\004" +
    "\030\104\001\002\000\010\020\uffd3\033\uffd3\056\uffd3\001" +
    "\002\000\010\003\107\020\013\031\uffc7\001\002\000\006" +
    "\026\341\031\uffc8\001\002\000\004\020\336\001\002\000" +
    "\006\026\uffc4\031\uffc4\001\002\000\004\031\112\001\002" +
    "\000\006\026\uffc5\031\uffc5\001\002\000\010\003\114\020" +
    "\uffc0\032\uffc0\001\002\000\006\020\013\032\uffd2\001\002" +
    "\000\006\020\uffbf\032\uffbf\001\002\000\004\032\132\001" +
    "\002\000\006\003\120\020\121\001\002\000\006\020\uffc1" +
    "\032\uffc1\001\002\000\010\020\uffbc\027\131\032\uffbc\001" +
    "\002\000\010\026\uffb9\027\uffb9\034\127\001\002\000\006" +
    "\026\124\027\125\001\002\000\006\026\uffba\027\uffba\001" +
    "\002\000\004\020\121\001\002\000\006\020\uffbe\032\uffbe" +
    "\001\002\000\006\026\uffbb\027\uffbb\001\002\000\004\035" +
    "\130\001\002\000\006\026\uffb8\027\uffb8\001\002\000\006" +
    "\020\uffbd\032\uffbd\001\002\000\024\010\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\020\uffb5\032\uffb5\033\uffb5" +
    "\001\002\000\024\010\143\012\136\013\134\014\145\015" +
    "\152\016\147\020\137\032\135\033\151\001\002\000\004" +
    "\030\332\001\002\000\024\010\uffb5\012\uffb5\013\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\020\uffb5\032\uffb5\033\uffb5\001\002" +
    "\000\004\030\uff9d\001\002\000\062\003\uff78\025\uff78\026" +
    "\uff78\027\uff78\030\uff78\031\uff78\034\uff78\035\uff78\036\uff78" +
    "\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045" +
    "\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78" +
    "\054\uff78\055\uff78\001\002\000\024\010\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\020\uffb3\032\uffb3\033\uffb3" +
    "\001\002\000\014\003\307\030\uff96\050\310\051\311\055" +
    "\312\001\002\000\004\030\303\001\002\000\004\030\243" +
    "\001\002\000\024\010\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\020\uffb6\032\uffb6\033\uffb6\001\002\000\004" +
    "\030\232\001\002\000\024\010\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\015\uffb4\016\uffb4\020\uffb4\032\uffb4\033\uffb4\001\002" +
    "\000\024\017\163\020\137\021\165\022\170\023\167\024" +
    "\173\027\230\030\174\047\161\001\002\000\062\003\uff7d" +
    "\025\155\026\uff7d\027\uff7d\030\uff7d\031\uff7d\034\154\035" +
    "\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d" +
    "\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052" +
    "\uff7d\053\uff7d\054\uff7d\055\uff7d\001\002\000\010\020\uffd1" +
    "\033\uffd1\056\uffd1\001\002\000\004\027\153\001\002\000" +
    "\026\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\020\uffa7\032\uffa7\033\uffa7\001\002\000\024\003" +
    "\157\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b" +
    "\030\uff7b\047\uff7b\001\002\000\004\020\156\001\002\000" +
    "\062\003\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042" +
    "\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c" +
    "\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\001\002\000" +
    "\004\035\226\001\002\000\022\017\163\020\137\021\165" +
    "\022\170\023\167\024\173\030\174\047\161\001\002\000" +
    "\020\017\163\020\137\021\165\022\170\023\167\024\173" +
    "\030\174\001\002\000\010\035\224\046\177\047\200\001" +
    "\002\000\004\020\013\001\002\000\046\026\uff82\027\uff82" +
    "\030\uff96\031\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041" +
    "\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82" +
    "\052\uff82\053\uff82\054\uff82\001\002\000\044\026\uff86\027" +
    "\uff86\031\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86" +
    "\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\052" +
    "\uff86\053\uff86\054\uff86\001\002\000\004\030\210\001\002" +
    "\000\044\026\uff84\027\uff84\031\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84" +
    "\046\uff84\047\uff84\052\uff84\053\uff84\054\uff84\001\002\000" +
    "\044\026\uff85\027\uff85\031\uff85\035\uff85\036\uff85\037\uff85" +
    "\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046" +
    "\uff85\047\uff85\052\uff85\053\uff85\054\uff85\001\002\000\044" +
    "\026\uff8a\027\uff8a\031\uff8a\035\uff8a\036\uff8a\037\uff8a\040" +
    "\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a" +
    "\047\uff8a\052\204\053\205\054\203\001\002\000\044\026" +
    "\uff87\027\uff87\031\uff87\035\uff87\036\uff87\037\uff87\040\uff87" +
    "\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047" +
    "\uff87\052\uff87\053\uff87\054\uff87\001\002\000\044\026\uff83" +
    "\027\uff83\031\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041" +
    "\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83" +
    "\052\uff83\053\uff83\054\uff83\001\002\000\022\017\163\020" +
    "\137\021\165\022\170\023\167\024\173\030\174\047\161" +
    "\001\002\000\010\031\176\046\177\047\200\001\002\000" +
    "\044\026\uff81\027\uff81\031\uff81\035\uff81\036\uff81\037\uff81" +
    "\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046" +
    "\uff81\047\uff81\052\uff81\053\uff81\054\uff81\001\002\000\020" +
    "\017\uff71\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71\030" +
    "\uff71\001\002\000\020\017\uff70\020\uff70\021\uff70\022\uff70" +
    "\023\uff70\024\uff70\030\uff70\001\002\000\020\017\163\020" +
    "\137\021\165\022\170\023\167\024\173\030\174\001\002" +
    "\000\044\026\uff8b\027\uff8b\031\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\052\204\053\205\054\203\001\002\000" +
    "\020\017\uff6d\020\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d" +
    "\030\uff6d\001\002\000\020\017\uff6f\020\uff6f\021\uff6f\022" +
    "\uff6f\023\uff6f\024\uff6f\030\uff6f\001\002\000\020\017\uff6e" +
    "\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\030\uff6e\001" +
    "\002\000\020\017\163\020\137\021\165\022\170\023\167" +
    "\024\173\030\174\001\002\000\044\026\uff88\027\uff88\031" +
    "\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88" +
    "\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\052\uff88\053" +
    "\uff88\054\uff88\001\002\000\026\003\213\017\163\020\137" +
    "\021\165\022\170\023\167\024\173\030\174\031\uff9a\047" +
    "\161\001\002\000\004\031\217\001\002\000\012\026\uff98" +
    "\031\uff98\046\177\047\200\001\002\000\006\026\uff97\031" +
    "\uff97\001\002\000\006\026\215\031\uff9b\001\002\000\022" +
    "\017\163\020\137\021\165\022\170\023\167\024\173\030" +
    "\174\047\161\001\002\000\012\026\uff99\031\uff99\046\177" +
    "\047\200\001\002\000\044\026\uff7e\027\uff7e\031\uff7e\035" +
    "\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e" +
    "\044\uff7e\045\uff7e\046\uff7e\047\uff7e\052\uff7e\053\uff7e\054" +
    "\uff7e\001\002\000\046\026\uff80\027\uff80\031\uff80\034\221" +
    "\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043" +
    "\uff80\044\uff80\045\uff80\046\uff80\047\uff80\052\uff80\053\uff80" +
    "\054\uff80\001\002\000\022\017\163\020\137\021\165\022" +
    "\170\023\167\024\173\030\174\047\161\001\002\000\010" +
    "\035\223\046\177\047\200\001\002\000\044\026\uff7f\027" +
    "\uff7f\031\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f" +
    "\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\052" +
    "\uff7f\053\uff7f\054\uff7f\001\002\000\062\003\uff7a\025\uff7a" +
    "\026\uff7a\027\uff7a\030\uff7a\031\uff7a\034\uff7a\035\uff7a\036" +
    "\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a" +
    "\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053" +
    "\uff7a\054\uff7a\055\uff7a\001\002\000\044\026\uff89\027\uff89" +
    "\031\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\052\204" +
    "\053\205\054\203\001\002\000\062\003\uff79\025\uff79\026" +
    "\uff79\027\uff79\030\uff79\031\uff79\034\uff79\035\uff79\036\uff79" +
    "\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045" +
    "\uff79\046\uff79\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79" +
    "\054\uff79\055\uff79\001\002\000\010\027\231\046\177\047" +
    "\200\001\002\000\026\010\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\014\uffa8\015\uffa8\016\uffa8\020\uffa8\032\uffa8\033\uffa8\001" +
    "\002\000\026\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\020\uffa9\032\uffa9\033\uffa9\001\002\000" +
    "\022\017\163\020\137\021\165\022\170\023\167\024\173" +
    "\030\174\047\161\001\002\000\012\026\234\031\235\046" +
    "\177\047\200\001\002\000\004\021\237\001\002\000\004" +
    "\027\236\001\002\000\026\010\uffab\011\uffab\012\uffab\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\020\uffab\032\uffab\033\uffab" +
    "\001\002\000\004\031\240\001\002\000\004\027\241\001" +
    "\002\000\026\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\020\uffaa\032\uffaa\033\uffaa\001\002\000" +
    "\022\010\143\012\136\013\134\014\145\015\152\016\147" +
    "\020\137\032\135\001\002\000\024\003\244\017\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\030\uff95\047\uff95" +
    "\001\002\000\004\031\270\001\002\000\022\017\163\020" +
    "\137\021\165\022\170\023\167\024\173\030\174\047\161" +
    "\001\002\000\030\031\uff8d\036\uff8d\037\uff8d\040\263\041" +
    "\260\042\261\043\266\044\265\045\262\046\177\047\200" +
    "\001\002\000\006\031\254\036\uff92\001\002\000\010\031" +
    "\uff8e\036\uff8e\037\uff8e\001\002\000\010\031\uff90\036\uff90" +
    "\037\252\001\002\000\022\017\163\020\137\021\165\022" +
    "\170\023\167\024\173\030\174\047\161\001\002\000\010" +
    "\031\uff8f\036\uff8f\037\uff8f\001\002\000\022\010\uff94\012" +
    "\uff94\013\uff94\014\uff94\015\uff94\016\uff94\020\uff94\032\uff94" +
    "\001\002\000\004\036\256\001\002\000\022\017\163\020" +
    "\137\021\165\022\170\023\167\024\173\030\174\047\161" +
    "\001\002\000\010\031\uff91\036\uff91\037\252\001\002\000" +
    "\022\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73" +
    "\030\uff73\047\uff73\001\002\000\022\017\uff77\020\uff77\021" +
    "\uff77\022\uff77\023\uff77\024\uff77\030\uff77\047\uff77\001\002" +
    "\000\022\017\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024" +
    "\uff75\030\uff75\047\uff75\001\002\000\022\017\uff72\020\uff72" +
    "\021\uff72\022\uff72\023\uff72\024\uff72\030\uff72\047\uff72\001" +
    "\002\000\022\017\163\020\137\021\165\022\170\023\167" +
    "\024\173\030\174\047\161\001\002\000\022\017\uff74\020" +
    "\uff74\021\uff74\022\uff74\023\uff74\024\uff74\030\uff74\047\uff74" +
    "\001\002\000\022\017\uff76\020\uff76\021\uff76\022\uff76\023" +
    "\uff76\024\uff76\030\uff76\047\uff76\001\002\000\014\031\uff8c" +
    "\036\uff8c\037\uff8c\046\177\047\200\001\002\000\022\010" +
    "\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\020\uff93" +
    "\032\uff93\001\002\000\024\010\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\020\uffa0\032\uffa0\033\uffa0\001\002" +
    "\000\026\010\uffb4\011\uff9f\012\uffb4\013\uffb4\014\uffb4\015" +
    "\uffb4\016\uffb4\020\uffb4\032\uffb4\033\uffb4\001\002\000\004" +
    "\011\274\001\002\000\022\010\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\020\uffa0\032\uffa0\001\002\000\022" +
    "\010\143\012\136\013\134\014\145\015\152\016\147\020" +
    "\137\032\135\001\002\000\024\010\uff9e\012\uff9e\013\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\020\uff9e\032\uff9e\033\uff9e\001" +
    "\002\000\026\010\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\020\uff9e\032\uff9e\033\uff9e\001\002\000" +
    "\026\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\020\uffa4\032\uffa4\033\uffa4\001\002\000\024\010" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\020\uffa2" +
    "\032\uffa2\033\uffa2\001\002\000\024\010\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\020\uffa3\032\uffa3\033\uffa3" +
    "\001\002\000\026\003\213\017\163\020\137\021\165\022" +
    "\170\023\167\024\173\030\174\031\uff9a\047\161\001\002" +
    "\000\004\031\305\001\002\000\004\027\306\001\002\000" +
    "\026\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\020\uffae\032\uffae\033\uffae\001\002\000\004\027" +
    "\321\001\002\000\004\027\320\001\002\000\004\027\317" +
    "\001\002\000\024\003\314\017\163\020\137\021\165\022" +
    "\170\023\167\024\173\030\174\047\161\001\002\000\010" +
    "\027\316\046\177\047\200\001\002\000\004\027\315\001" +
    "\002\000\026\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\020\uffb1\032\uffb1\033\uffb1\001\002\000" +
    "\026\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\020\uffb2\032\uffb2\033\uffb2\001\002\000\026\010" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\020\uffaf\032\uffaf\033\uffaf\001\002\000\026\010\uffb0\011" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\020\uffb0" +
    "\032\uffb0\033\uffb0\001\002\000\026\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\020\uffad\032\uffad" +
    "\033\uffad\001\002\000\004\030\243\001\002\000\022\010" +
    "\143\012\136\013\134\014\145\015\152\016\147\020\137" +
    "\032\135\001\002\000\024\010\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\020\uff9c\032\uff9c\033\uff9c\001\002" +
    "\000\026\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015" +
    "\uff9c\016\uff9c\020\uff9c\032\uff9c\033\uff9c\001\002\000\026" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\020\uffa5\032\uffa5\033\uffa5\001\002\000\024\010\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\020\uffa1\032" +
    "\uffa1\033\uffa1\001\002\000\024\010\143\012\136\013\134" +
    "\014\145\015\152\016\147\020\137\032\135\033\331\001" +
    "\002\000\026\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6" +
    "\015\uffa6\016\uffa6\020\uffa6\032\uffa6\033\uffa6\001\002\000" +
    "\004\020\137\001\002\000\004\031\334\001\002\000\004" +
    "\027\335\001\002\000\026\010\uffac\011\uffac\012\uffac\013" +
    "\uffac\014\uffac\015\uffac\016\uffac\020\uffac\032\uffac\033\uffac" +
    "\001\002\000\010\026\uffc3\031\uffc3\034\337\001\002\000" +
    "\004\035\340\001\002\000\006\026\uffc2\031\uffc2\001\002" +
    "\000\004\020\013\001\002\000\006\026\uffc6\031\uffc6\001" +
    "\002\000\012\005\uffe3\006\uffe3\020\uffe3\032\uffe3\001\002" +
    "\000\010\020\uffd5\033\uffd5\056\uffd5\001\002\000\010\020" +
    "\uffcf\033\uffcf\056\uffcf\001\002\000\010\020\013\033\351" +
    "\056\352\001\002\000\004\020\355\001\002\000\010\020" +
    "\uffd0\033\uffd0\056\uffd0\001\002\000\004\002\000\001\002" +
    "\000\004\020\uffcd\001\002\000\004\020\355\001\002\000" +
    "\010\020\uffcc\033\uffcc\056\uffcc\001\002\000\004\030\uffcb" +
    "\001\002\000\004\030\357\001\002\000\010\003\107\020" +
    "\013\031\uffc7\001\002\000\004\031\361\001\002\000\010" +
    "\003\114\020\uffc0\032\uffc0\001\002\000\006\020\013\032" +
    "\363\001\002\000\024\010\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\020\uffca\032\uffca\033\uffca\001\002\000" +
    "\024\010\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
    "\020\uffb5\032\uffb5\033\uffb5\001\002\000\024\010\143\012" +
    "\136\013\134\014\145\015\152\016\147\020\137\032\135" +
    "\033\366\001\002\000\010\020\uffc9\033\uffc9\056\uffc9\001" +
    "\002\000\010\020\uffce\033\uffce\056\uffce\001\002\000\006" +
    "\026\uffec\027\uffec\001\002\000\006\026\u0101\027\u0102\001" +
    "\002\000\010\026\uffea\027\uffea\034\377\001\002\000\006" +
    "\026\374\027\375\001\002\000\004\020\372\001\002\000" +
    "\012\005\uffef\006\uffef\020\uffef\032\uffef\001\002\000\006" +
    "\026\uffed\027\uffed\001\002\000\004\035\u0100\001\002\000" +
    "\006\026\uffe9\027\uffe9\001\002\000\006\026\uffeb\027\uffeb" +
    "\001\002\000\012\005\uffee\006\uffee\020\uffee\032\uffee\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\055\005\001\001\000\004\003\007\001\001\000\002" +
    "\001\001\000\014\004\014\006\016\011\013\022\015\061" +
    "\010\001\001\000\006\010\372\012\367\001\001\000\004" +
    "\075\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\040\001\001\000\004\061\021\001\001\000\006\005" +
    "\024\007\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\044\001\001\000\002\001\001\000\004\024" +
    "\052\001\001\000\006\025\047\061\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\051\001\001\000" +
    "\004\023\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\057\061\054\001\001\000\004\031\072\001" +
    "\001\000\006\026\060\030\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\075\061\073\001\001\000\006\033\343\060\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\077" +
    "\001\001\000\006\033\102\060\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\034\107" +
    "\035\104\036\110\061\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\112\001\001\000\010\020\116\061" +
    "\115\077\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\121\021\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\132\001\001\000\016\040\143\046" +
    "\145\047\137\067\140\070\147\071\141\001\001\000\002" +
    "\001\001\000\004\037\327\001\001\000\004\041\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\062\226" +
    "\063\170\064\171\067\163\070\147\071\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\104\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\062\161\063\170" +
    "\064\171\067\163\070\147\071\165\001\001\000\014\063" +
    "\224\064\171\067\163\070\147\071\165\001\001\000\004" +
    "\072\200\001\001\000\004\061\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\062\174\063\170\064\171" +
    "\067\163\070\147\071\165\001\001\000\004\072\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\063\201\064\171\067\163\070\147\071\165\001" +
    "\001\000\004\073\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\064\206\067\163\070" +
    "\147\071\165\001\001\000\002\001\001\000\022\053\213" +
    "\054\210\062\211\063\170\064\171\067\163\070\147\071" +
    "\165\001\001\000\002\001\001\000\004\072\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\062\215\063" +
    "\170\064\171\067\163\070\147\071\165\001\001\000\004" +
    "\072\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\062\221\063\170\064\171\067\163\070\147\071\165" +
    "\001\001\000\004\072\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\073\205\001\001\000\002\001\001" +
    "\000\004\072\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\062\232\063\170\064\171\067\163\070\147" +
    "\071\165\001\001\000\004\072\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\040\270\046" +
    "\271\047\137\067\140\070\147\071\141\001\001\000\004" +
    "\102\244\001\001\000\002\001\001\000\024\051\246\052" +
    "\250\062\245\063\170\064\171\066\247\067\163\070\147" +
    "\071\165\001\001\000\006\072\200\074\263\001\001\000" +
    "\004\103\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\062\245\063\170\064\171\066\252\067\163\070" +
    "\147\071\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\052\256\062\245\063\170\064" +
    "\171\066\247\067\163\070\147\071\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\062\266\063\170\064\171" +
    "\067\163\070\147\071\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\200\001\001\000\002\001\001" +
    "\000\004\043\301\001\001\000\004\044\272\001\001\000" +
    "\002\001\001\000\004\043\274\001\001\000\014\046\276" +
    "\047\275\067\140\070\147\071\141\001\001\000\004\045" +
    "\300\001\001\000\004\045\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\053\213\054" +
    "\303\062\211\063\170\064\171\067\163\070\147\071\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\062\312\063\170\064\171\067\163\070\147\071" +
    "\165\001\001\000\004\072\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\322\001\001" +
    "\000\014\046\324\047\323\067\140\070\147\071\141\001" +
    "\001\000\004\042\326\001\001\000\004\042\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\040\143\046" +
    "\145\047\137\067\140\070\147\071\141\001\001\000\002" +
    "\001\001\000\006\067\332\070\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\341\061" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\345\001\001\000\006\014\347\061" +
    "\346\001\001\000\006\015\366\056\355\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\352\001\001\000" +
    "\006\015\353\056\355\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\034\357\035\104\036" +
    "\110\061\105\001\001\000\002\001\001\000\004\016\361" +
    "\001\001\000\006\020\116\061\115\001\001\000\004\101" +
    "\363\001\001\000\004\037\364\001\001\000\016\040\143" +
    "\046\145\047\137\067\140\070\147\071\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\375\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    Tab.init(); // Universe scope

    stringType.setElementType(Tab.charType);

    Tab.currentScope.addToLocals (new Obj (Obj.Type, "string", stringType ) );
    Tab.currentScope.addToLocals (new Obj (Obj.Type, "bool", boolType ) ); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

  	Symbol s = this.getScanner().next_token();
    // print lexer output - testing
  	//if (s != null && s.value != null) // don't print lex
  		  //System.out.println(s.toString() + " " + s.value.toString());
  		
  	return s;

    }


        
    // counters
    int globalVarCount = 0;
    int globalArrayCount = 0;
    int globalFunctionCount = 0;
    int classDefCount = 0;
    int statementBlockCount = 0;
    int fcallInMainCount = 0;
    int newObjectCount = 0;
    int classMethodCount = 0;
    int classFieldCount = 0;
    int classExtendedCount = 0;

    public boolean errorDetected = false;
    
    //----------------- redefined methods for specific error reporting -----------------------
    public void report_fatal_error(String message, Object info) throws java.lang.Exception 
    {        
        done_parsing();
        report_error(message, info);
        errorDetected = true;
    }
  
    public void syntax_error(Symbol cur_token) 
    {
        report_error("\nSyntax error", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception 
    {
        report_fatal_error("Fatal error, parsing cannot continue", cur_token);
    }

    // syntax and semantic errors
    public void report_error(String message, Object info)
    {
        if (info == null || message == null) return;

        System.err.print(message);
        System.err.flush();
        
        if (info instanceof Symbol)
            System.err.println(" on line " + ((Symbol)info).left);
        else System.err.println("");
    }

    // report object info - use this function for testing
    public void report_info(String message, Object info) 
    {
        StringBuilder msg = new StringBuilder(message); 
       
        if (info instanceof Symbol)
              msg.append (" on line ").append(((Symbol)info).left);
        
        System.out.println( msg.toString() ); // testing
    }

    public static void dump() { Tab.dump(); }

    public static void dump(SymbolTableVisitor s) 
    { 
        if (s != null) Tab.dump(s); 
    }

    // non standard types
    public Struct stringType = new Struct(Struct.Array); // char will be added in init
    public Struct boolType = new Struct(5);



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {



    // Action code variables ----------------------------------------------------------------------------------------------
    private Struct currType;
    private String currTypeName; 

    private Obj currMethod = null;
    private Obj currClass = null;

    private boolean isFunctionCall = false;
    private boolean returnFound = false;
    private boolean inMain = false;
    private boolean mainDetected = false;

    // use for actual param type and number checking
    private ArrayList<Struct> currActualParams = null;

    // code generation address fixing
    Deque<Integer> elseSkipAddressFixStack = new ArrayDeque<Integer>();
    Deque<Integer> whileStartAddressFixStack = new ArrayDeque<Integer>();
    Deque<ArrayList<Integer>> falseAddressFixStack = new ArrayDeque<ArrayList<Integer>>();
    Deque<ArrayList<Integer>> breakAddressFixStack = new ArrayDeque<ArrayList<Integer>>();
    List<Integer> orConditionAddressFixList = null;

    // predefined funcions addresses
    int printStringAdr = 0;
    int readStringAdr = 0;
    int addStringAdr = 0;

    // virtual functions table
    MethodTable methodTable = new MethodTable();

    // polymorphism support 
    List<Obj> classList = new ArrayList<Obj>();
    Deque<Obj> callingObjAddressStack = new ArrayDeque<Obj>();

    // code for initialisation of constant strings
    StringCodeBuffer StringCode = new StringCodeBuffer(); 

    // Print error ----------------------------------------------------------------------------------------------
    public void printError(String error) 
    {
        if (error == null) return;
        System.err.println(error);
        parser.errorDetected = true;
    }


    // Add class field ----------------------------------------------------------------------------------------------
    void addClassField(String name, int line, boolean isArray)
    {
        if (name == null || currClass == null || currType == null) return;

        if ( !isDeclared(name) ) 
        { 
            //not declared in this scope already
            Obj temp = null;

            if (isArray) temp = Tab.insert(Obj.Fld, name, new Struct(Struct.Array, currType));
            else temp = Tab.insert(Obj.Fld, name, currType);


            currClass.setAdr(currClass.getAdr() + 1);
            temp.setAdr(currClass.getAdr());

            parser.classFieldCount++;

            parser.report_info( Messages.SemanticMessages.fieldDecl(temp, line), null );

        }
        else printError( Messages.SemanticErrors.alreadyDeclared(name, line) );

    }

    // Add global variable ----------------------------------------------------------------------------------------------
    void addGlobalVariable(String name, int line, boolean isArray)
    {
        if (name == null || currType == null) return;

        if ( !isDeclared(name) ) 
        { 
            //not declared in this scope already
            Obj temp = null;

            if (isArray) temp = Tab.insert(Obj.Var, name, new Struct(Struct.Array, currType));
            else temp = Tab.insert(Obj.Var, name, currType);

            if ( isArray ) parser.globalArrayCount++;
            else parser.globalVarCount++;

            parser.report_info( Messages.SemanticMessages.globalVarDecl(temp, line), null );

        }
        else printError( Messages.SemanticErrors.alreadyDeclared(name, line) );
    }
    
    // Add formal parameter ----------------------------------------------------------------------------------------------
    void addFormalParam(String name, int line, boolean isArray)
    {
        if (name == null || currType == null) return;

        if ( !isDeclared(name) ) 
        { 
            //not declared in this scope already
            Obj temp = null;

            if (isArray) temp = Tab.insert(Obj.Var, name, new Struct(Struct.Array, currType));
            else temp = Tab.insert(Obj.Var, name, currType);
            
            // add formal parameter
            if (currMethod != null)
            {
                currMethod.setLevel( currMethod.getLevel() + 1 );
                
                if (currClass != null) temp.setAdr(temp.getAdr() + 1); // skip this
            }
 
        }
        else printError( Messages.SemanticErrors.alreadyDeclared(name, line) );
    }
    
    // Add local variable ----------------------------------------------------------------------------------------------
    void addLocalVariable(String name, int line, boolean isArray)
    {
        if (name == null || currType == null) return;

        if ( !isDeclared(name) ) 
        { 
            //not declared in this scope already
            Obj temp = null;

            if (isArray) temp = Tab.insert(Obj.Var, name, new Struct(Struct.Array, currType));
            else temp = Tab.insert(Obj.Var, name, currType);

            parser.report_info( Messages.SemanticMessages.localVarDecl(temp, line), null );
            
        }
        else printError( Messages.SemanticErrors.alreadyDeclared(name, line) );
    }

    // Add global constant - const type x = value --------------------------------------------------------------------------------------
    void addConstant(String name, Obj con, int line)
    {
        if (name == null || con == null || currType == null || currTypeName == null) return;

        //check for valid type = value combination
        if ( currType.getKind() != con.getType().getKind() )
        {
            printError( Messages.SemanticErrors.wrongType(currTypeName, line) );
            return;
        }

        if ( isDeclared(name) )
        {
            printError( Messages.SemanticErrors.alreadyDeclared(name, line) );
            return;
        }

        // string type
        if (con.getType() == parser.stringType)
        {
            Obj obj = Tab.insert(Obj.Var, name, con.getType());

            obj.setLevel(0); // global 
                    
            StringCode.put(Code.putstatic);
            StringCode.put2(obj.getAdr());

            return;
        }

        Obj obj = Tab.insert(Obj.Con, name, con.getType());

        obj.setAdr(con.getAdr());          
        parser.report_info( Messages.SemanticMessages.constVarDecl(obj, line), null );

    }


    // Semantic helper methods ----------------------------------------------------------------------------------------------
    // used for actual param type and number checking
    void addActualParam(Obj obj)
    {
        if (obj == null) return;
        
        if (currActualParams == null) currActualParams = new ArrayList<Struct>();

        currActualParams.add(obj.getType());
    }

    // find if symbol has been declared - ONLY in current scope
    boolean isDeclared(String name)
    {
        if (name == null) return true;

        Obj temp = Tab.find(name);
        if (temp.getKind() == Obj.Type) return true; // prevent int int;
        
        temp = Tab.currentScope.findSymbol(name);
        
        if (temp == Tab.noObj || temp == null) return false;
        
        return true;
    }

    // Actual and Formal parameter checking ------------------------------------------------------------------------------------------
    void checkActualParams(Obj f, int line)
    {
        if (f == null) return;

        int count = f.getLevel();

        if (f.getName().equals("len") || f.getName().equals("ord") || f.getName().equals("chd")) 
        {
            currActualParams = null;
            return;
        }

        // check numbers
        if (currActualParams == null)
        {
            if (count > 0) printError( Messages.SemanticErrors.wrongParams(f.getName(), line) );
            return;
        }

        // number difference
        if ( currActualParams.size() != count )
        {
            printError( Messages.SemanticErrors.wrongParams(f.getName(), line) );
            currActualParams = null;
            return;
        }
     
        ListIterator<Struct> it = currActualParams.listIterator(0); // start on first

        for( Obj member : f.getLocalSymbols() )
        {
            if (count-- > 0) 
            {
                    Struct s = it.next(); // check types
                    if ( !s.compatibleWith(member.getType()) && !isPolymorph(member.getType(), s) ) 
                        printError( Messages.SemanticErrors.wrongParams(f.getName(), line) );
            }
        }

        currActualParams = null; // done for this call
    }


    // Type dst = src ------------------------------------------------------------------------------------------
    boolean isPolymorph(Struct dst, Struct src)
    {
        if (dst == null || src == null) return false;
        if (dst.getKind() != Struct.Class || src.getKind() != Struct.Class) return false;

        if (dst.equals(src)) return true;

        Struct t = src.getElemType();
        
        while (t != null)
        {
            if (dst.equals(t)) return true;
            t = t.getElemType();
        }

        return false;
    }

    // add pointer to virtual table - field0
    void addVTpointer()
    {
        Tab.insert(Obj.Fld, "VTaddress", Tab.intType);
    }

    // called behind function or method call 
    void generateFunctionCall(Obj func, int line)
    {
        if (func == null) return;

        checkActualParams(func, line);

        if (func.getName().equals("len"))
        {
            Code.put(Code.arraylength);
            return;
        }

        // method call
        if (isFunctionCall == false || currClass != null)
        {

            if (currClass == null)
            {
                // load obj address to get VT address
                Obj temp = callingObjAddressStack.peek();
                
                if (temp != null)
                {
                    callingObjAddressStack.pop();
                    Code.load(temp);
                }
                else
                {
                    // function call
                    int destAdr = func.getAdr() - Code.pc;
                    Code.put(Code.call);
                    Code.put2(destAdr);
                    return;
                }
                    
            }
            else 
            {
                Code.put(Code.load_n);
                callingObjAddressStack.pop();
            }


            Code.put(Code.getfield);
            Code.put2(0);

            Code.put(Code.invokevirtual);

            String s = func.getName();

            for (int i = 0; i < s.length(); i++)
                 Code.put4(s.charAt(i));

            Code.put4(-1);
            
            return;
        }

        // function call
        int destAdr = func.getAdr() - Code.pc;
        Code.put(Code.call);
        Code.put2(destAdr);

    }

    // generate predefined functions that prints string -------------------------------------------------------------------------
    void generatePrintString()
    {
            printStringAdr = Code.pc;

            // (string), len, i
            Code.put(Code.enter);
            Code.put(1); 
            Code.put(3);
            
            // i = 0
            Code.put(Code.const_n);
            Code.put(Code.store_2);
            
            // len = len(str);
            Code.put(Code.load_n);
            Code.put(Code.arraylength);
            Code.put(Code.store_1);
            
            // while (i < len)
            Code.put(Code.load_2);
            Code.put(Code.load_1);
            Code.put(Code.jcc + Code.ge);
            Code.put2(15);

            // print s[i];
            Code.put(Code.load_n);
            Code.put(Code.load_2);
            Code.put(Code.baload);
            Code.put(Code.const_1);
            Code.put(Code.bprint);
            // i++
            Code.put(Code.load_2);
            Code.put(Code.const_1);
            Code.put(Code.add);
            Code.put(Code.store_2);
            
            Code.put(Code.jmp);
            Code.put2(-14);
            
            Code.put(Code.exit);
            Code.put(Code.return_);
    }

    // generate predefined functions that reads string -------------------------------------------------------------------------
    void generateReadString()
    {
            readStringAdr = Code.pc;
            
            // (string), len, i
            Code.put(Code.enter);
            Code.put(1); 
            Code.put(3);

            // i = 0
            Code.put(Code.const_n);
            Code.put(Code.store_2);
            
            // len = len(str);
            Code.put(Code.load_n);
            Code.put(Code.arraylength);
            Code.put(Code.store_1);

            // while (i < len)
            Code.put(Code.load_2);
            Code.put(Code.load_1);
            Code.put(Code.jcc + Code.ge);
            Code.put2(14);

            // read s[i];
            Code.put(Code.load_n);
            Code.put(Code.load_2);
            Code.put(Code.bread);
            Code.put(Code.bastore);

            // i++
            Code.put(Code.load_2);
            Code.put(Code.const_1);
            Code.put(Code.add);
            Code.put(Code.store_2);

            Code.put(Code.jmp);
            Code.put2(-13);
            
            Code.put(Code.exit);
            Code.put(Code.return_);
    }

    // generate predefined functions that concatenate strings -------------------------------------------------------------------------
    void generateAddString()
    {
           addStringAdr = Code.pc;

            // (string s1, string s2); int i, j, m, n; string res;
            Code.put(Code.enter);
            Code.put(2); 
            Code.put(7);

            // m = len(s1);
            Code.put(Code.load_n);
            Code.put(Code.arraylength);
            Code.put(Code.store);
            Code.put(4);
            
            // n = len(s2);
            Code.put(Code.load_1);
            Code.put(Code.arraylength);
            Code.put(Code.store);
            Code.put(5);
            
            // res = new char[m+n]
            Code.put(Code.load);
            Code.put(4);
            Code.put(Code.load);
            Code.put(5);
            Code.put(Code.add);
            Code.put(Code.newarray);
            Code.put(0);
            Code.put(Code.store);
            Code.put(6);

            // while (i < m)
            Code.put(Code.load_2);
            Code.put(Code.load);
            Code.put(4);
            Code.put(Code.jcc + Code.ge);
            Code.put2(17);

            // s[i] = s1[i];
            Code.put(Code.load);
            Code.put(6);
            Code.put(Code.load_2);
            Code.put(Code.load_n);
            Code.put(Code.load_2);
            Code.put(Code.baload);
            Code.put(Code.bastore);

            // i++;
            Code.put(Code.load_2);
            Code.put(Code.const_1);
            Code.put(Code.add);
            Code.put(Code.store_2);

            Code.put(Code.jmp);
            Code.put2(-17);
            
            // while (j < n)
            Code.put(Code.load_3);
            Code.put(Code.load);
            Code.put(5);
            Code.put(Code.jcc + Code.ge);
            Code.put2(21);

            // s[i] = s2[j];
            Code.put(Code.load);
            Code.put(6);
            Code.put(Code.load_2);
            Code.put(Code.load_1);
            Code.put(Code.load_3);
            Code.put(Code.baload);
            Code.put(Code.bastore);
            
            // i++;
            Code.put(Code.load_2);
            Code.put(Code.const_1);
            Code.put(Code.add);
            Code.put(Code.store_2);

            // j++;
            Code.put(Code.load_3);
            Code.put(Code.const_1);
            Code.put(Code.add);
            Code.put(Code.store_3);

            Code.put(Code.jmp);
            Code.put2(-21);

            // res left on stack
            Code.put(Code.load);
            Code.put(6);
            
            Code.put(Code.exit);
            Code.put(Code.return_);
    }
    // ------------------------------------------------------------------------------------------------------------------------
    void generateVFT()
    {
        if (parser.errorDetected) return;


        Set<String> methodsKeySet = null;
        Set<Obj> methodsSet = null;
            
        boolean first = true;

        for (Obj i : classList)
        {
                // class members
                Struct type = i.getType();

                while (type != null)
                {
                        for (Obj obj : type.getMembers())
                        {
                                if (obj.getKind() != Obj.Meth) continue;
        
                                if (first) 
                                {
                                    // save VFT pointer in class address
                                    methodsKeySet = new HashSet<String>();
                                    methodsSet = new HashSet<Obj>();
        
                                    i.setAdr(Code.dataSize);
                                    first = false;
                                } 
                                    
                                if (methodsKeySet.contains(obj.getName() + obj.getLevel())) continue;

                                methodsKeySet.add(obj.getName() + obj.getLevel());
                                methodsSet.add(obj);
                        }

                        type = type.getElemType();
               
                } // end of whle

                if (!first)
                {
                    // add methods to virtual functions table
                    for (Obj obj : methodsSet)
                        methodTable.addFunctionEntry(obj.getName(), obj.getAdr());

                    // all class methods added
                    methodTable.addTableTerminator();
                    first = true;
                }
            
            } // end of for
    }


  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Mulop ::= MOD 
            {
              Integer RESULT =null;
		 RESULT = Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Mulop ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Mulop ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Addop ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Addop ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Relop ::= EQUAL 
            {
              Integer RESULT =null;
		 RESULT = Code.eq; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Relop ::= NOTEQUAL 
            {
              Integer RESULT =null;
		 RESULT = Code.ne; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Relop ::= LESS 
            {
              Integer RESULT =null;
		 RESULT = Code.lt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Relop ::= LESSEQUAL 
            {
              Integer RESULT =null;
		 RESULT = Code.le; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Relop ::= GREATEREQUAL 
            {
              Integer RESULT =null;
		 RESULT = Code.ge; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Relop ::= GREATER 
            {
              Integer RESULT =null;
		 RESULT = Code.gt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IdentList ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                // find symbol in table
                Obj obj = null;

                // local
                obj = Tab.currentScope.findSymbol(name);

                
                // find in class
                if (obj == null && currClass != null)
                {

                        Struct type = currClass.getType();

                        obj = Tab.currentScope.getOuter().findSymbol(name);

                        while (type != null && obj == null)
                        {
                                for ( Obj field : type.getMembers() )
                                    if ( name.equals( field.getName() ) )
                                    {
                                        obj = field;
                                        break;
                                    }

                                type = type.getElemType();
                        }

                        if (name.equals("this")) obj = currClass;
                }

                // global
                if (obj == null) obj = Tab.find(name);

                // symbol not found
                if ( obj == Tab.noObj || obj == null)
                {
                    obj = null;
                    printError( Messages.SemanticErrors.nameNotDeclaredErr(name, nameleft) );
                }
                else if (obj.getKind() != Obj.Meth) parser.report_info(Messages.SemanticMessages.symbolFound(obj, nameleft), null);

                // load this
                if (obj != null && currClass != null)
                {
                    if (obj.getKind() == Obj.Fld) 
                        Code.put(Code.load_n + 0);
                    else if (obj.getKind() == Obj.Meth)
                    {
                        Code.put(Code.load_n + 0); 

                        callingObjAddressStack.push(currClass);

                        isFunctionCall = true;
                    }
                }

                RESULT = obj;
            
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IdentList ::= IdentList LBRACKET error RBRACKET 
            {
              Obj RESULT =null;
		 
                printError(Messages.SyntaxErrors.arrayIndexErr); 
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IdentList ::= IdentList LBRACKET NT$7 Expr RBRACKET 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
                        if (e != null)
                            if (e.getType() != Tab.intType)
                                    printError( Messages.SemanticErrors.onlyInteger(eleft) );

                    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$7 ::= 
            {
              Obj RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

                        // add array address to stack before index
                        if (d != null)
                        {
                                if (d.getType().getKind() != Struct.Array)
                                    printError( Messages.SemanticErrors.wrongType(d.getName(), dleft) );
                                else  Code.load(d);

                                RESULT = new Obj( Obj.Elem , d.getName() , d.getType().getElemType() );
                        }

                    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // IdentList ::= IdentList DOT IDENT 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj i = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                Obj member = null;
                
                if (i != null)
                {
                    if ( i.getType().getKind() != Struct.Class) // class type?
                    {
                        printError( Messages.SemanticErrors.notObject(i.getName(), ileft) );
                    }
                    else // find closest member
                    {
                        Struct type = i.getType();

                        if (currClass != null) member = Tab.currentScope.getOuter().findSymbol(name);

                        while (type != null && member == null)
                        {
                            for ( Obj f : type.getMembers() )
                                if ( name.equals( f.getName() ) )
                                {
                                    member = f;
                                    break;
                                }

                            type = type.getElemType(); // move to parent

                        }
   
                        if ( member == null ) printError( Messages.SemanticErrors.memberNotFound(name, ileft) );
                        else 
                        {  
                            if (member.getKind() == Obj.Meth)
                            {
                                callingObjAddressStack.push(i);
                                isFunctionCall = false;
                            }

                            // address on stack
                            if (i.getKind() != Obj.Type)
                                Code.load(i);
                            else
                            {
                                // this.member
                                if (member.getKind() == Obj.Fld || member.getKind() == Obj.Meth) 
                                    Code.put(Code.load_n + 0);
                            }
                        }          
                    }        
                }

                RESULT = member;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Designator ::= IdentList 
            {
              Obj RESULT =null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj des = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = des; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Factor ::= FuncCall LPAREN ActualPars RPAREN 
            {
              Obj RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj f = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
                // end of function call
                generateFunctionCall(f, fleft);

                if (f != null)
                    if (f.getType() == Tab.noType)
                        printError( Messages.SemanticErrors.voidAssign(fleft) );

                RESULT = f;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Factor ::= NEW Type LBRACKET Expr RBRACKET 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
                if (t != null && e != null)
                {
                    if (e.getType() != Tab.intType)
                        printError( Messages.SemanticErrors.onlyInteger(eleft) );
                    else
                    {     
                            // number of elements on stack
                            Obj arr = new Obj(Obj.Elem, t.getName(), new Struct(Struct.Array, t.getType()) );

                            Code.put(Code.newarray);
                            if ( t.getType() == Tab.charType ) Code.put(0); 
                            else Code.put(1);

                            // address left on stack
                            parser.newObjectCount++;
                            RESULT = arr;
                    }

                }
                else RESULT = t;                
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Factor ::= NEW Type 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
                if (t != null)
                {
                    if (t.getType().getKind() != Struct.Class)
                        printError( Messages.SemanticErrors.wrongType(t.getName(), tleft) );
                    else
                    { 
                        Code.put(Code.new_);
                        Code.put2(t.getType().getNumberOfFields() * 4);

                        parser.newObjectCount++;

                        // set VT address
                        Code.put(Code.dup);
                        Code.loadConst(t.getAdr());
                        Code.put(Code.putfield);
                        Code.put2(0);
                    }
                }

                // ret obj
                RESULT = t; 

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Factor ::= LPAREN Expr RPAREN 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
                RESULT = e; 
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Factor ::= Designator 
            {
              Obj RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
                if (d != null)
                {
                    Code.load(d);
                }
                    
                RESULT = d;

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Factor ::= STRCONST 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
 
                Obj con = new Obj(Obj.Con, "", parser.stringType);

                // allocate on heap - len bytes
                Code.loadConst(i.length());
                Code.put(Code.newarray);
                Code.put(0);

                // address on stack
                for (int index = 0; index < i.length(); index++)
                {
                    Code.put(Code.dup); // duplicate, bastore removes address
                    Code.loadConst(index);
                    Code.loadConst(i.charAt(index));
                    Code.put(Code.bastore);
                }

                RESULT = con; 
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Factor ::= BOOLCONST 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
                Obj con = Tab.insert(Obj.Con, "", parser.boolType);

                if (i.equals("true")) con.setAdr(1);
                else con.setAdr(0);

                Code.load(con); 

                RESULT = con; 
                
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Factor ::= CHARCONST 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character i = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
                Obj con = new Obj(Obj.Con, "", Tab.charType);
               
                con.setAdr(i.charValue());
                Code.load(con); // put on expresion stack

                RESULT = con; 

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Factor ::= NUMBER 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
                Obj con = new Obj(Obj.Con, "", Tab.intType);
               
                con.setAdr(i.intValue());
                Code.load(con); // put on expresion stack
                
                RESULT = con;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Term ::= Factor 
            {
              Obj RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj f = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		           
            RESULT = f;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Term ::= Term Mulop Factor 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj f = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            // only int types
            if(t != null && f != null)
            {
                if (t.getType().equals( f.getType() ) && (t.getType() == Tab.intType))
                {
                        // t and f on stack
                        Code.put(op);           
                        RESULT = t;
                }
                else 
                {
                        printError( Messages.SemanticErrors.wrongType(currTypeName, tleft) );
                        RESULT = null;
                } 
            }

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expr ::= MINUS Term 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
            
            if (t != null)
            {
                if ( t.getType() != Tab.intType ) 
                    printError( Messages.SemanticErrors.onlyInteger(tleft) );

                Code.put(Code.neg); // -t on stack
            }

            RESULT = t; 
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expr ::= Term 
            {
              Obj RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
            RESULT = t;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Expr ::= Expr Addop Term 
            {
              Obj RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		

            if (e != null && t != null)
            {
                    // integer - all operations
                    if (t.getType().equals( e.getType() ) && (t.getType() == Tab.intType))
                    {
                            // e and t on stack
                            Code.put(op);

                            RESULT = e;  
                    } 
                    // string - plus only                 
                    else if (t.getType().equals( e.getType() ) && t.getType().equals(parser.stringType) && (op == Code.add))
                    {

                            Code.put(Code.call);
                            Code.put2(addStringAdr - Code.pc + 1);
                            RESULT = e;
                    }
                            
                    else 
                    {
                            printError( Messages.SemanticErrors.wrongType(currTypeName, tleft) );
                            RESULT = null;
                    }
            }
            
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CondFact ::= Expr Relop Expr 
            {
              Struct RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj e1 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e2 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                
                if (e1 != null && e2 != null)
                {
                    // == and !=
                    if (op == Code.eq || op == Code.ne)
                    {
                        if ( !e1.getType().equals(e2.getType()) ) 
                            printError( Messages.SemanticErrors.cannotCompare(e1left) );
                        else
                        {
                            // todo for strings
                            // fix after while or if
                            Code.putFalseJump(op, 0);
                            falseAddressFixStack.peek().add(Code.pc - 2);
                        }
                    }
                    else 
                    {
                        if ( !e1.getType().equals(e2.getType()) || e1.getType() != Tab.intType ) 
                            printError( Messages.SemanticErrors.cannotCompare(e1left) );
                        else
                        {
                            // fix after while or if
                            Code.putFalseJump(op, 0);
                            falseAddressFixStack.peek().add(Code.pc - 2);
                        }
                    }

                    RESULT = parser.boolType;

                }

            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CondFact ::= Expr 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
                // the lonely boolean
                Struct res = Tab.noType;

                if (t != null)
                {
                    if ( !t.getType().equals(parser.boolType) ) printError( Messages.SemanticErrors.onlyBoolean(tleft) );
                    else res = parser.boolType;

                    // CodeGen bool == 1
                    Code.loadConst(1);

                    // fix after while or if
                    Code.putFalseJump(Code.eq, 0); 
                    falseAddressFixStack.peek().add(Code.pc - 2);

                }

                RESULT = res;

            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CondTerm ::= CondTerm AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Condition ::= Condition NT$6 OR CondTerm 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$6 ::= 
            {
              Object RESULT =null;

                    // left part of OR
                    // if cond true, skip rest
                    Code.putJump(0);
                    orConditionAddressFixList.add(Code.pc-2);

                    // redirect false jump to right part
                    ArrayList<Integer> al = falseAddressFixStack.pop();
                    for (Integer i: al) Code.fixup(i);

                    // repeat
                    falseAddressFixStack.push( new ArrayList<Integer>() ); 

                
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Cond ::= LPAREN error RPAREN 
            {
              Object RESULT =null;
		 printError(Messages.SyntaxErrors.condErr); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Cond",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Cond ::= LPAREN NT$5 Condition RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		

            // jump here if one or part is true
            for (Integer i: orConditionAddressFixList)
                Code.fixup(i);

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Cond",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$5 ::= 
            {
              Object RESULT =null;
 
            // Condition start
            falseAddressFixStack.push( new ArrayList<Integer>() );
            orConditionAddressFixList = new ArrayList<Integer>();
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FuncCall ::= Designator 
            {
              Obj RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
            if (inMain) parser.fcallInMainCount++;

            if (func != null)
            {
                
                if ( Obj.Meth == func.getKind() ) // function and method
                {
                        if ( currClass == null && isFunctionCall == true) // not in class and its not IDENT.IDENT
                            parser.report_info( Messages.SemanticMessages.functionCalled(func, funcleft), null );
                        else 
                        {
                            parser.report_info( Messages.SemanticMessages.methodCalled(func, funcleft), null );
                        } 
                          
                }   
                else printError( Messages.SemanticErrors.notFunction(func.getName(), funcleft) );
                        

                RESULT = func;
            }

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FuncCall",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ActualParamList ::= error 
            {
              Object RESULT =null;
		 printError(Messages.SyntaxErrors.actualParsErr); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ActualParamList ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 addActualParam(e); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ActualParamList ::= ActualParamList COMMA Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 addActualParam(e); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamList",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ActualPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ActualPars ::= ActualParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualPars",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // WhileEnd ::= 
            {
              Object RESULT =null;
		 
                // jump back to the start of while
                Code.putJump( whileStartAddressFixStack.pop() );

                // false condition, jump over while
                ArrayList<Integer> al = falseAddressFixStack.pop();
                for (Integer i: al) Code.fixup(i);

                // fix all breaks
                al = breakAddressFixStack.pop();
                
                for (Integer i: al) Code.fixup(i);

            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("WhileEnd",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WhileStart ::= 
            {
              Object RESULT =null;
		 
                // all breaks inside one level while
                breakAddressFixStack.push( new ArrayList<Integer>() );

                // save address for return
                whileStartAddressFixStack.push(Code.pc);

            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("WhileStart",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ElseEnd ::= 
            {
              Object RESULT =null;
		 
            // end of else
            Code.fixup( elseSkipAddressFixStack.pop() ); 
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseEnd",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ElseStart ::= 
            {
              Object RESULT =null;
		
            // skip else if IF was true
            Code.putJump(0);
            elseSkipAddressFixStack.push(Code.pc - 2);

        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ElseStart",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IfEnd ::= 
            {
              Object RESULT =null;
		  
            // false condition, jump over if
            ArrayList<Integer> al = falseAddressFixStack.peek();

            if (al != null)
            {
                for (Integer i: al) Code.fixup(i);

                falseAddressFixStack.pop();
            }
        
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IfEnd",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Unmatched ::= WHILE WhileStart Cond Unmatched WhileEnd 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Unmatched ::= IF Cond Matched ElseStart ELSE IfEnd Unmatched ElseEnd 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Unmatched ::= IF Cond Statement IfEnd 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Matched ::= IF Cond Matched ElseStart ELSE IfEnd Matched ElseEnd 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Matched ::= WHILE WhileStart Cond Matched WhileEnd 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Matched ::= LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
		 
                    parser.statementBlockCount++; 
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                    if ( breakAddressFixStack.peek() == null ) printError( Messages.SemanticErrors.breakOutOfLoop(bleft) );
                    else
                    {
                        Code.putJump(0);
                        breakAddressFixStack.peek().add(Code.pc - 2);
                    }
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                
                    if (currMethod != null)
                    {
                        if ( currMethod.getType() != Tab.noType )
                            printError( Messages.SemanticErrors.wrongRetValue(currMethod.getName(), tleft) );
                        else
                        {
                                Code.put(Code.exit);
                                Code.put(Code.return_);
                        }
                    } 
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                    
                    if (currMethod != null && e != null)
                    {
                        
                        Struct t = e.getType();
                        
                        returnFound = true;

                        if ( !t.compatibleWith( currMethod.getType())  && !isPolymorph(currMethod.getType(), t) )
                            printError( Messages.SemanticErrors.wrongRetValue(currMethod.getName(), eleft) );
                        else
                        {
                                Code.put(Code.exit);
                                Code.put(Code.return_);
                        }

                    }  

            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Matched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
                if (e != null)
                {  
                        if (e.getType() == Tab.intType)
                        {
                                Code.loadConst(i);
                                Code.put(Code.print);  
                        }
                        else if (e.getType() == Tab.charType)
                        {
                                Code.loadConst(i);
                                Code.put(Code.bprint);
                        }
                        else if (e.getType() == parser.boolType)
                        {
                                Code.loadConst(i);
                                Code.put(Code.print);
                        }
                        else if (e.getType() == parser.stringType)
                        {     
                            Code.put(Code.call);
                            Code.put2(printStringAdr - Code.pc + 1);
                        }
                        else printError( Messages.SemanticErrors.wrongParams("print", eleft) );                  
                }
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Matched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		

                if (e != null)
                {  
                        if (e.getType() == Tab.intType)
                        {
                                Code.loadConst(5);
                                Code.put(Code.print);  
                        }
                        else if (e.getType() == Tab.charType)
                        {
                                Code.loadConst(1);
                                Code.put(Code.bprint);
                        }
                        else if (e.getType() == parser.boolType)
                        {
                                Code.loadConst(1);
                                Code.put(Code.print);
                        }
                        else if (e.getType() == parser.stringType)
                        {       
                            Code.put(Code.call);
                            Code.put2(printStringAdr - Code.pc + 1);
                        }
                        else printError( Messages.SemanticErrors.wrongParams("print", eleft) );                  
                }
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
                    if (d != null)
                    {
                        if (d.getKind() == Obj.Con)
                            printError( Messages.SemanticErrors.assigningToConst(d.getName(), dleft) );
                        
                        if (d.getType() == Tab.intType)
                        {
                                Code.put(Code.read);
                                Code.store(d);
                        }
                        else if (d.getType() == Tab.charType) 
                        {
                                Code.put(Code.bread);
                                Code.store(d);
                        }
                        else if (d.getType() == parser.boolType)
                        {
                                Code.put(Code.read);
                                Code.store(d);
                        }
                        else if (d.getType() == parser.stringType)
                        {
                            
                            Code.load(d);
                            Code.put(Code.call);
                            Code.put2(readStringAdr - Code.pc + 1);

                        }
                        else printError( Messages.SemanticErrors.wrongType(d.getName(), dleft) );

                    }
            
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Matched ::= Designator error SEMI 
            {
              Object RESULT =null;
		 
                    printError(Messages.SyntaxErrors.funcErr); 
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Matched ::= FuncCall LPAREN ActualPars RPAREN SEMI 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj f = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
                    // end of function call
                    generateFunctionCall(f, fleft);

                    if (f != null)
                        if (f.getType() != Tab.noType) 
                            Code.put(Code.pop);
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Matched ::= Designator DEC SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
                    if (d != null)
                    {
                        if (d.getKind () == Obj.Con)
                            printError( Messages.SemanticErrors.assigningToConst(d.getName(), dleft) );

                        if (d.getType() != Tab.intType) 
                            printError( Messages.SemanticErrors.onlyInteger(dleft) );
                        else
                        {
                            Code.load(d);
                            Code.loadConst(1);
                            Code.put(Code.sub);
                            Code.store(d);
                        }
                    }

            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Matched ::= Designator INC SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
                    if (d != null)
                    {
                        if (d.getKind() == Obj.Con)
                            printError( Messages.SemanticErrors.assigningToConst(d.getName(), dleft) );

                        if (d.getType() != Tab.intType) 
                            printError( Messages.SemanticErrors.onlyInteger(dleft) );
                        else
                        {
                            Code.load(d);
                            Code.loadConst(1);
                            Code.put(Code.add);
                            Code.store(d);
                        }
                    }

            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Matched ::= Designator ASSIGN error SEMI 
            {
              Object RESULT =null;
		 
                    printError(Messages.SyntaxErrors.assignErr); 
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Matched ::= Designator ASSIGN Expr SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj e = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
                    
                    if (d != null && e != null)
                    {
                        Struct t1 = d.getType();
                        Struct t2 = e.getType();


                        if ( !t2.assignableTo(t1) && !isPolymorph(t1, t2) )
                            printError( Messages.SemanticErrors.wrongType(d.getName(), dleft) );

                        if (d.getKind() == Obj.Con)
                            printError( Messages.SemanticErrors.assigningToConst(d.getName(), dleft) );

                        Code.store(d);

                    }
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Type ::= IDENT 
            {
              Obj RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        Obj obj = Tab.find(typeName); // find type in symtable

        currType = null;

        if (obj == Tab.noObj) 
        {
                printError( Messages.SemanticErrors.noTyperErr(typeName, typeNameleft) );
                RESULT = null;
        }
        else 
        {
                if (Obj.Type == obj.getKind()) 
                {
                        RESULT = obj;
                        currType = obj.getType(); 
                        currTypeName = typeName;

                }
                else 
                {
                        printError( Messages.SemanticErrors.typerErr(typeName, typeNameleft) );
                        RESULT = null;
                }
        }


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Var ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 addLocalVariable(name, nameleft, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Var ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 addLocalVariable(name, nameleft, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VarDecl ::= Type error 
            {
              Object RESULT =null;
		 printError(Messages.SyntaxErrors.localErr); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		 printError(Messages.SyntaxErrors.localErr); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VarDecl ::= Type VarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VarDeclList ::= error 
            {
              Object RESULT =null;
		 printError(Messages.SyntaxErrors.localErr); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FormParamDecl ::= Type IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 addFormalParam(name, nameleft, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDecl",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FormParamDecl ::= Type IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 addFormalParam(name, nameleft, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamDecl",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FormParamList ::= error 
            {
              Object RESULT =null;
		 printError(Messages.SyntaxErrors.formParsErr); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FormParamList ::= FormParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FormParamList ::= FormParamList COMMA FormParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParamList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormPars ::= FormParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Function ::= FuncName LPAREN FormPars RPAREN VarDeclList LBRACE NT$4 StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj f = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
            // function end
            if (f != null && currMethod != null)
            {

                if ( (f.getType() != Tab.noType) && !returnFound ) 
                    printError( Messages.SemanticErrors.noReturn(f.getName(), fleft) );

                parser.statementBlockCount++; 
                parser.globalFunctionCount++;
                            
                Tab.closeScope();

                returnFound = false;
                currMethod = null;

                Code.put(Code.exit);
                Code.put(Code.return_);
            }    
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Function",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$4 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj f = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
 
            // chain before body to available recursion
            if (f != null && currMethod != null) 
            {
                Tab.chainLocalSymbols(currMethod);
        
                Code.put(Code.enter);
                Code.put( currMethod.getLevel() ); // formal parameters
                Code.put( Tab.currentScope.getnVars() ); // formal + locals
            }

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FuncName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  
        // function start
        currMethod = null;

        if ( !isDeclared(name) ) 
        {
            // not declared
            currMethod = Tab.insert(Obj.Meth, name, currType);
            currMethod.setLevel(0); // use to count formal parameters

            currMethod.setAdr(Code.pc); // save pc

            Tab.openScope(); // enter function scope

        }
        else printError( Messages.SemanticErrors.alreadyDeclared(name, nameleft) );


        // main
        if ( name.equals("main") && currMethod != null)
        {
                if (currType != Tab.noType || currActualParams != null) printError( Messages.SemanticErrors.mainFunctionErr(nameleft) );
                else  
                {
                    // in main function. 
                    inMain = true;
                    mainDetected = true;
                    Code.mainPc = currMethod.getAdr(); // set main PC

                    // store vft-creation byte code before the first instruction 
                    Object array[] = methodTable.toArray(); 
                    
                    for (int i = 0; i < array.length; i++) 
                        Code.buf[Code.pc++] = ((Byte)array[i]).byteValue(); 
                    
                    methodTable.clear(); 

                    // store const string initialisation byte code before the first instruction
                    for (int i = 0; i < StringCode.size(); i++) 
                        Code.buf[Code.pc++] = (StringCode.getBuffer())[i];
                }

        }
        else inMain = false;

        RESULT = currMethod;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FuncName",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunctionDecl ::= VOID NT$3 Function 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$3 ::= 
            {
              Object RESULT =null;
 currType = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FunctionDecl ::= Type Function 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FunctionDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FunctionDeclList ::= FunctionDeclList FunctionDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Method ::= MethodName LPAREN FormPars RPAREN VarDeclList NT$2 LBRACE StatementList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
            // method end
            if (m != null && currMethod != null) 
            {

                if ( (m.getType() != Tab.noType) && !returnFound ) 
                    printError( Messages.SemanticErrors.noReturn(m.getName(), mleft) );
            
                parser.statementBlockCount++; 
                parser.classMethodCount++; 
                        
                Tab.closeScope(); // chained before body
            
                Code.put(Code.exit);
                Code.put(Code.return_);
            }

            returnFound = false;
            currMethod = null;

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Method",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$2 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj m = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

            // chain before body to available recursion
            if (m != null && currMethod != null) 
            {
                Tab.chainLocalSymbols(currMethod);
        
                Code.put(Code.enter);
                Code.put( currMethod.getLevel() + 1); // formal parameters
                Code.put( Tab.currentScope.getnVars() + 1); // formal + locals

            }
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodDecl ::= VOID NT$1 Method 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$1 ::= 
            {
              Object RESULT =null;
 currType = Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= Type Method 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        // method start
        Obj temp = null;

        if (currClass != null && currType != null)
        {
        
                if ( !isDeclared(name) ) 
                { 
                    // not declared
                    temp = Tab.insert(Obj.Meth, name, currType);
                
                    temp.setLevel(0); // use to count formal parameters
                    temp.setAdr(Code.pc); // save pc

                    Tab.openScope(); // enter method scope
                }
                else printError( Messages.SemanticErrors.alreadyDeclared(name, nameleft) );
        }
        
        currMethod = temp;
        RESULT = temp;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Field ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 addClassField(name, nameleft, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Field",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Field ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 addClassField(name, nameleft, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Field",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FieldsDeclList ::= Field 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FieldsDeclList ::= FieldsDeclList COMMA Field 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FieldsDecl ::= error 
            {
              Object RESULT =null;
		 printError(Messages.SyntaxErrors.fieldsErr); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FieldsDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		 printError(Messages.SyntaxErrors.fieldsErr); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FieldsDecl ::= Type FieldsDeclList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MethodsDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MethodsDeclList ::= MethodsDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodsDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ClassFieldsDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFieldsDeclList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ClassFieldsDeclList ::= ClassFieldsDeclList FieldsDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassFieldsDeclList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ClassBody ::= LBRACE ClassFieldsDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBody",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassBody ::= LBRACE ClassFieldsDeclList LBRACE MethodsDeclList RBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassBody",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Super ::= Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj t = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
    
        if (currClass != null && currTypeName != null && t != null)
        {

            currClass.getType().setElementType( t.getType() );
            currClass.setAdr( t.getAdr() );

            // check for self inheritance
            if (currTypeName.equals( currClass.getName() ) ) printError( Messages.SemanticErrors.selfInheritance(tleft) );
        }


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Super",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS ClassName EXTENDS error ClassBody 
            {
              Object RESULT =null;
		 
                    printError(Messages.SyntaxErrors.extendsErr); 
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassDecl ::= CLASS ClassName EXTENDS Super ClassBody 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj className = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		      
                    // class end
                    if (className != null)
                    {
                        Tab.chainLocalSymbols(className.getType());
                        Tab.closeScope();
                        parser.classExtendedCount++;
                    }
                    
                    currClass = null;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS ClassName ClassBody 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj className = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		     
                    // class end
                    if (className != null)
                    {
                        Tab.chainLocalSymbols(className.getType());
                        Tab.closeScope();

                    }

                    currClass = null;
            
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ClassName ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        // class start
        Obj temp = null;
        
        // add new type if it does not exists already
        if ( !isDeclared(name) )
        {
            temp = new Obj (Obj.Type, name, new Struct (Struct.Class) );

            classList.add(temp);
            
            Tab.currentScope.addToLocals( temp );
            Tab.openScope();

            parser.classDefCount++;

            parser.report_info( Messages.SemanticMessages.classDecl(temp, nameleft), null );

            temp.getType().setElementType(null);
            addVTpointer();

            temp.setAdr(0);

        }
        else printError( Messages.SemanticErrors.alreadyDeclared(name, nameleft) );
                        

        currClass = temp;
        RESULT = temp;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobalVar ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 addGlobalVariable(name, nameleft, true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVar",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GlobalVar ::= IDENT 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 addGlobalVariable(name, nameleft, false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVar",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GlobalVarList ::= error COMMA 
            {
              Object RESULT =null;
		 printError(Messages.SyntaxErrors.globalErr); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVarList ::= GlobalVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVarList ::= GlobalVarList COMMA GlobalVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		 printError(Messages.SyntaxErrors.globalErr); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarDecl ::= Type GlobalVarList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Const ::= STRCONST 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
            Obj con = new Obj(Obj.Con, "", parser.stringType);

            // allocate on heap - len bytes
            StringCode.loadConst(i.length());
            StringCode.put(Code.newarray);
            StringCode.put(0);

            // address on stack
            for (int index = 0; index < i.length(); index++)
            {
                StringCode.put(Code.dup); // duplicate, bastore removes address
                StringCode.loadConst(index);
                StringCode.loadConst(i.charAt(index));
                StringCode.put(Code.bastore);
            }

            RESULT = con; 
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Const ::= BOOLCONST 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
            // set type and value
            Obj con = new Obj(Obj.Con, "", parser.boolType);       
            
            if (i.equals("true")) con.setAdr(1);
            else con.setAdr(0);
                
            RESULT = con;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Const ::= CHARCONST 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character i = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
            // set type and value
            Obj con = new Obj(Obj.Con, "", Tab.charType);       
            
            con.setAdr(i.charValue());
                
            RESULT = con;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Const ::= NUMBER 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		     
            // set type and value
            Obj con = new Obj(Obj.Con, "", Tab.intType);       
            
            con.setAdr(i.intValue());
                
            RESULT = con;
        
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Const",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstVar ::= IDENT ASSIGN Const 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj i = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 addConstant(name, i, nameleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstVar",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstList ::= ConstVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstList ::= ConstList COMMA ConstVar 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDecl ::= CONST Type error SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl ::= CONST Type ConstList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Declaration",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaration ::= GlobalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Declaration",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaration ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Declaration",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclarationList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclarationList ::= DeclarationList Declaration 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclarationList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
        // program start
        RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
        Tab.openScope();

        generatePrintString();
        generateReadString();
        generateAddString();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= PROGRAM ProgramName DeclarationList LBRACE NT$0 FunctionDeclList RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
            
            // program end
            Tab.chainLocalSymbols(p); 
            Tab.closeScope(); 
            
            if (!mainDetected) printError( Messages.SemanticErrors.noMainDetected );

    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

            
            // declarations finished - create virtual functions table
            Code.dataSize = Tab.currentScope.getnVars();
            generateVFT();
    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

